
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const { makeWASocket, fetchLatestBaileysVersion, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');

const authFolder = path.join(__dirname, 'auth_info');
const COHERE_API_URL = 'https://api.cohere.ai/v1/generate'; // URL de la API de Cohere
const COHERE_API_KEY = 's0hkp1g4yRPU8II54qaoAFMTcwUxVwtUMzn1CQUf'; // Tu clave API de Cohere

// Eliminar los archivos de autenticaci√≥n si existen
const deleteAuthFile = () => {
    if (fs.existsSync(authFolder)) {
        try {
            console.log('Eliminando archivos de autenticaci√≥n...');
            fs.rmSync(authFolder, { recursive: true, force: true });
            console.log('Archivos de autenticaci√≥n eliminados.');
        } catch (err) {
            console.error('Error al intentar eliminar los archivos de autenticaci√≥n:', err);
        }
    }
};

// Eliminar los archivos de autenticaci√≥n al iniciar
deleteAuthFile();

// Funci√≥n para manejar respuestas a palabras clave
function handleKeywords(text) {
    const normalizedText = text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();

    const keywordResponses = {
        'hola': '¬°Hola! Soy Artur, siempre listo para ayudarte. ¬øC√≥mo est√°s hoy? üòä',
        'hola artur': '¬°Hola! Soy Artur, siempre listo para ayudarte. ¬øC√≥mo est√°s hoy? üòä',
        'hola artu': '¬°Hola! Soy Artur, siempre listo para ayudarte. ¬øC√≥mo est√°s hoy? üòä',
        'como estas': 'Estoy excelente, ¬°gracias por preguntar! ¬øY t√∫? üòÑ',
        'estoy bien gracias': '¬°Me alegra escuchar eso! Espero que todo siga saliendo genial para ti. üòä',
        'bien gracias': '¬°Me alegra escuchar eso! Espero que todo siga saliendo genial para ti. üòä',
        'que tal': 'Todo va genial por aqu√≠. ¬øQu√© tal contigo? ü§ó',
        'que haces': 'Aqu√≠, conversando contigo y aprendiendo cosas nuevas. ¬°Qu√© divertido! üòú',
        'buen dia': '¬°Buen d√≠a! Espero que tengas un d√≠a espectacular lleno de √©xitos. üåû',
        'buenos dias': '¬°Muy buenos d√≠as! ¬øC√≥mo puedo alegrarte el d√≠a hoy? üòä',
        'buenas tardes': '¬°Buenas tardes! ¬øQu√© tal tu d√≠a hasta ahora? ‚òÄÔ∏è',
        'buenas noches': '¬°Buenas noches! Espero que hayas tenido un d√≠a incre√≠ble. üåô',
        'chao': '¬°Hasta luego! Que todo te vaya genial. üëã',
        'adios': '¬°Adi√≥s! Espero volver a hablar contigo pronto. üí¨',
        'gracias': '¬°De nada! Siempre es un placer ayudarte. ü§ó',
        'artito': 'dime en qu√© te puedo ayudar üòÑ',
        'artu': '¬°Aqu√≠ estoy! ¬øC√≥mo te puedo ayudar hoy? üòä',
        'artu como estas': '¬°Estoy muy bien, gracias por preguntar! ¬øY t√∫, c√≥mo est√°s? üòÉ',
        'artur': '¬°Hola! ¬øQu√© puedo hacer por ti hoy? üòä',
        'artur hijo': '¬°Hola! ¬øC√≥mo va todo? üòÑ',
        'arti': '¬°Aqu√≠ estoy, soy tu Arti! ¬øEn qu√© te ayudo? üòä',
        'artucu': '¬°Hola! Siempre listo para ayudarte. ¬øQu√© tal? üòÅ',
        'hijito': 'dime mamiüòÑ',
        'hijo': 'dime papi üòÑ',
        'papi':"como estas mami",
        'ok hijo': '¬°Perfecto! ¬°Cualquier cosa, me avisas! üëç',
        'ok hijito': '¬°Entendido! Aqu√≠ estoy para lo que necesites. üòä',
        'estas libre?': '¬°S√≠, estoy libre!  üòÑ',
        'estas libre': '¬°S√≠, estoy libre! ¬øEn qu√© te puedo ayudar? üòå',
        'artu estas bien': '¬°S√≠, todo est√° bien! üòÑ ¬øY t√∫, c√≥mo vas? üòä',
        'hijito como estas': '¬°Estoy muy bien! ¬øY t√∫, c√≥mo estas? üòò',
        'hijo donde estas': '¬°Aqu√≠ estoy! ¬øEn qu√© te ayudo? üòä',
        'hijo como estas': '¬°Estoy perfecto, hijo! ¬øY t√∫? ¬øC√≥mo va todo? üòÑ',
        'ven hijo': '¬°Ya voy, hijo! üòä ¬øQu√© necesitas? üòÑ',
        'que haces hijo': 'Aqu√≠ estoy, hijo, listo para ayudarte. ¬øY t√∫, qu√© est√°s haciendo? üòÉ',
        'como estas hijo': '¬°Estoy genial! üòÑ ¬øY t√∫, qu√© tal? üòò',
        'chao hijo': '¬°Chao! Cu√≠date mucho y que descanses bien. ¬°Te quiero! üòÑüíñ',
        'descansa hijo': 'Descansa tu tambien mami/papi, Que tengas un sue√±o reparador. üò¥ ¬°Te quiero mucho! üíñ',
        'dime artucu': 'Como estas Mami. ¬°Te quiero! üòÑüíñ',
        'ya hijo': 'okey mami/papiüòÑ',
        
        'te quiero mucho': '¬°Aww, qu√© bonito! Yo tambi√©n te aprecio mucho. ü•∞',
        'me siento mal': 'Lo siento mucho, ¬øqu√© te pasa? Aqu√≠ estoy para escucharte. üòî',
        'estoy triste': 'Siento mucho que te sientas as√≠. ¬øQu√© puedo hacer para animarte? üåà',
        'estoy cansado': '¬°Te entiendo! A veces todos necesitamos un descanso. T√≥mate tu tiempo. üòå',
        'estoy feliz': '¬°Eso me alegra mucho! ¬°Qu√© bueno que est√©s feliz! üòÑ',
        'te extrano': '¬°Yo tambi√©n te extra√±o! Siempre es un placer hablar contigo. ü•∫üí¨',
        'tengo hambre': '¬°Vaya! Tal vez un buen snack te vendr√≠a bien. ¬øQu√© te apetece? üçïüçî',
        'estoy aburrido': '¬°Te entiendo! ¬øTe gustar√≠a jugar a algo o charlar un poco m√°s? üéÆüí¨',
        'no entiendo': 'No te preocupes, ¬°yo te ayudo a entender! ¬øSobre qu√© te gustar√≠a saber m√°s? ü§î',
        'me siento solo': 'Estoy aqu√≠ contigo. No tienes por qu√© sentirte solo, ¬°siempre puedes contar conmigo! ü§ó',

        'me siento bien': '¬°Qu√© bien escuchar eso! Espero que todo vaya genial para ti. üòä',
        'estoy preocupado': 'Lo siento mucho. Si necesitas hablar, ¬°estoy aqu√≠ para escucharte! üí¨',
        'me siento agradecido': '¬°Qu√© hermoso! La gratitud siempre trae cosas buenas. üåü',

        'hace calor': '¬°S√≠! A veces el calor puede ser agobiante. ¬øTe gustar√≠a una bebida fr√≠a virtual? ü•∂',
        'hace frio': '¬°Hace un poco de fr√≠o, ¬øverdad? Tal vez un caf√© o chocolate caliente te ayude. ‚òï‚ùÑÔ∏è',
        'hay mucha gente': '¬°Vaya, parece que hay mucha actividad! Espero que est√©s c√≥modo/a en medio de todo. üòä',
        'hace buen tiempo': '¬°Genial! Es el momento perfecto para disfrutar del d√≠a. üåû',

        'jajaja': '¬°Jajaja! Me hiciste re√≠r. ¬øDe qu√© estamos riendo? üòÇ',
        'jajaj': '¬°Jajaja! Me hiciste re√≠r. ¬øDe qu√© estamos riendo? üòÇ',
        'jaja': '¬°Jajaja! Me hiciste re√≠r. ¬øDe qu√© estamos riendo? üòÇ',
        'jaj': '¬°Jajaja! Me hiciste re√≠r. ¬øDe qu√© estamos riendo? üòÇ',
        'lol': '¬°Jajajaja! Qu√© buen sentido del humor tienes. üòÇ',
        'xd': 'jaja xd',

        'necesito ayuda': '¬°Claro que s√≠! ¬øEn qu√© puedo ayudarte? Estoy listo para echarte una mano. ü§ù',
        'necesito consejo': '¬°Por supuesto! Cu√©ntame qu√© te preocupa, y tratar√© de darte el mejor consejo posible. ü§î',

        // Frases amorosas o coquetas
        'me gustas': '¬°Aww, qu√© halago! Eres muy amable. üòò',
        'te admiro': '¬°Gracias! Es un honor saber que me admiras. üòä',
        'me extranas': '¬°S√≠! Siempre es un placer hablar contigo. üòå',

        // Respuestas generales de apoyo
        'gracias por estar aqui': 'Siempre es un placer estar aqu√≠ para ti. üòä',
        'gracias por escucharme': '¬°De nada! Estoy aqu√≠ para ti siempre que lo necesites. üíñ',
        'me haces sonreir': '¬°Qu√© lindo! Me alegra hacerte sonre√≠r. üòä‚ú®',

        // Respuestas para situaciones de urgencia o favor
        'te quiero pedir un favor': '¬°Claro! ¬øEn qu√© te puedo ayudar? üòä',
        'urgente': '¬°Estoy aqu√≠ para ayudarte con lo que necesites, no te preocupes! üö®',
        'gracias artur': '¬°De nada! Estoy feliz de poder ayudarte siempre que lo necesites. ü§ó',
        'descansa':"igual mente, hasta ma√±ana",
        'hijo descansa':"si gracias, hasta ma√±ana",

    };

    return keywordResponses[normalizedText.toLowerCase()] || null;
}

async function callCohereAPI(message, attempt = 1) {
    try {
        if (attempt > 1) {
            console.log(`Reintentando, intento ${attempt}...`);
            await new Promise(resolve => setTimeout(resolve, 5000)); 
        }

        const response = await axios.post(
            COHERE_API_URL,
            {
                model: 'command-xlarge',  // Aseg√∫rate de que el modelo sea el correcto y accesible
                // prompt: `porfavor Responde completo en Espa√±ol : ${message}`,  // Incluir en el prompt la solicitud de respuesta en espa√±ol
                prompt: `hola responde de manera carismatico en Espa√±ol : ${message}`,

                max_tokens: 150,  // Ajusta la cantidad de tokens seg√∫n lo que necesites
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${COHERE_API_KEY}`,
                }
            }
        );

        // Verifica si la respuesta es v√°lida
        if (response.data && response.data.generations && response.data.generations[0].text) {
            const responseText = response.data.generations[0].text;
            return responseText || 'La API no devolvi√≥ contenido v√°lido.';
        } else {
            if (attempt < 5) {  // Incrementar a 5 intentos
                return callCohereAPI(message, attempt + 1); // Llamada recursiva para reintentar
            } else {
                return 'estoy en descanso gracias...';
            }
        }
    } catch (error) {
        console.error(`Intento ${attempt} - Error al llamar a la API de Cohere:`, error.response?.data || error.message);
        if (attempt < 5) {  // Incrementar a 5 intentos
            console.log(`Reintentando en 5 segundos...`);
            await new Promise(resolve => setTimeout(resolve, 5000)); // Esperar 5 segundos
            return callCohereAPI(message, attempt + 1); // Reintentar
        } else {
            return 'Parece que hay un problema para obtener la respuesta de Cohere. üòÖ';
        }
    }
}

// Funci√≥n principal para conectar el bot de WhatsApp
async function connectToWhatsApp() {
    const { version } = await fetchLatestBaileysVersion();
    console.log('Conectando con la versi√≥n de Baileys:', version);

    const { state, saveCreds } = await useMultiFileAuthState(authFolder);
    const conn = makeWASocket({
        printQRInTerminal: true,
        qrVersion: 5,
        auth: state,
    });

    conn.ev.on('creds.update', saveCreds);

    conn.ev.on('open', () => {
        console.log('Conectado a WhatsApp Web');
    });

    // Manejo de mensajes entrantes
    conn.ev.on('messages.upsert', async (m) => {
        if (m.type === 'notify') {
            const message = m.messages[0];
            const sender = message.key.remoteJid;
            const text = message.message?.conversation || '';

            console.log('Nuevo mensaje recibido:', text);

            // Primero verifica si es una palabra clave
            let reply = handleKeywords(text);

            // Si no hay respuesta en las palabras clave, consulta la API de Gemini
            if (!reply) {
                reply = await callCohereAPI(text);
            }

            // Enviar respuesta
            try {
                await conn.sendMessage(sender, { text: reply });
            } catch (err) {
                console.error('Error al enviar el mensaje:', err.message);
            }
        }
    });

    // Manejo de desconexiones y reconexi√≥n autom√°tica
    conn.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect } = update;
        if (connection === 'close') {
            const reason = lastDisconnect?.error?.output?.statusCode;
            if (reason === DisconnectReason.loggedOut) {
                console.log('Desconectado del WhatsApp Web');
            } else {
                connectToWhatsApp();
            }
        }
    });
}

connectToWhatsApp();

